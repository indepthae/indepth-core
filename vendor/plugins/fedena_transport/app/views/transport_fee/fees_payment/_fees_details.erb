<% if @payer_type.present? and @payer_type=='Archived Student' %>
  <% @transport_fee.receiver=@student %>
  <% @transport_fee.receiver_type='Student' %>
  <% @transport_fee.receiver_id=@student.former_id %>
<% elsif @payer_type.present? and @payer_type=='Archived Employee' %>
  <% @transport_fee.receiver=@employee %>
  <% @transport_fee.receiver_type='Employee' %>
  <% @transport_fee.receiver_id=@employee.former_id %>
<% end %>

<% @total_fees = 0 %>
<% @total_paid_fine = 0 %>
<% @amount_to_pay = 0  %>
<div id="fees_details">
    <% remote_form_for :fees, :url => {:action => 'transport_fee_collection_pay', 
      :receiver_type => @transport_fee.receiver_type, 
      :receiver_id => @transport_fee.receiver_id}, 
      :before => "$('submit_button').disable()", 
      :complete => "setTimeout(function(){$('submit_button').enable();},5000)" do |form| %>
      <% locals = {:form => form} %>

      <% unless @transport_fee.nil? %>

        <table class="gray_table_list" align="center" width="100%" cellpadding="0" cellspacing="0">
            <tr class="main_head tr-list_head">
                <td class="sl-col"><%= t('sl_no') %></td>
                <td class="set_border_right"><%= "#{t('particulars')}" %></td>
                <td class="set_border_right" colspan="2">
                    <%= "#{t('amount')}" %> (<%= currency %>)
                </td>
            </tr>
            <% i = 0 %>
            <%= render :partial => "transport_fee/fees_payment/particular_list", 
              :locals => {:i => i} %>

            <% @total_fees = @transport_fee.bus_fare %>

            <%= render :partial => 'transport_fee/fees_payment/discount_list', 
              :locals => {:i => i, :transport_fee => @transport_fee, 
              :total_fees => @total_fees} %>

            <%= render :partial => "transport_fee/fees_payment/tax_list",
              :locals => {:i => i} %>

            <% @total_fees = precision_label(@total_fees).to_f - 
              precision_label(@discount_amount).to_f %>

            <%= render :partial => 'transport_fee/fees_payment/student_fine_list', 
              :locals => {:i => i, :transport_fee => @transport_fee, 
              :total_fees => @total_fees} %>

            <%= render :partial => "transport_fee/fees_payment/add_fine_due_date_exceeded" %>

            <%= render :partial => 'transport_fee/fees_payment/summary', 
              :locals => {:i => i, :total_fine => @total_paid_fine.to_f} %>

            <%= render :partial => "transport_fee/fees_payment/payment_block", 
              :locals =>  locals %>

          <% end %>
      </table>
    <% end %>

    <%= render :partial => "transport_fee/fees_payment/paid_fees" %>

</div>

<script type="text/javascript">

  var precision = parseInt("<%= @precision %>");

  MakeBox = function (t_id) {
      remove_popup_box();
      options = {
          'submit': '<%=t('revert_transaction')%>',
          'cancel': '<%=t('cancel')%>',
          'field_name': 'reason',
          'input_type': 'text_area',
          'title': '<%=t('revert_transaction')%>'
      };

      build_modal_box(options);
      build_prompt_popup_box('<%=t('reason')%>', options);

      j('#popup_window #popup_footer > #yes').click(function () {
          if(j(this).attr('disabled') == undefined) {
              j(this).attr('disabled', 'disabled');
              j.ajax({
                  type: 'POST',
                  url: '/transport_fee/delete_transport_transaction',
                  data: {
                      'transaction_id': t_id,
                      'id': <%=@transport_fee.receiver_id%>,
                      'date': <%=@transport_fee.transport_fee_collection_id%>,
                      'reason': j('#popup_content #prompt_value').val(),
                      'session_fingerprint': '<%= session_fingerprint %>'
                  },
                  success: function () {
                      remove_popup_box();
                  }
              });
          }
      });
  };

  submit_fine = function () {
      j("body").scrollTop(0);
      remove_popup_box();
      options = {
          'submit': '<%=t('add')%>',
          'cancel': '<%=t('cancel')%>',
          'field_name': 'fine_amount',
          'input_type': 'text_input',
          'title': '<%=t('add_fine')%>'
      };
      build_modal_box(options);
      build_prompt_popup_box('<%=t('fine_amount')%>', options);
      j('#prompt_value').addClass('precision_text')
      j('#popup_window #popup_footer > #yes').click(function () {
          show_fine(parseFloat(j('#popup_content #prompt_value').val()));
          total_wallet_amount = ('<%= (@student.present? and @student.advance_fee_wallet.present?) ? @student.advance_fee_wallet.amount : "0.00" %>')
          j('#wallet_amount_applied').val(false)
          j('.wallet-amount-field').val(parseFloat(total_wallet_amount).toFixed(precision))
          j('.wallet-amount-applied').val(parseFloat(0.00).toFixed(precision))
      });
  };

  show_fine = function (fine) {
      fine = parseFloat(fine || 0);
      var auto_fine_amt = 0;
      var auto_fine_present = '<%= @transport_fee.is_paid and @fine_rule.present? %>';
      var fines_count = j('.fine-row:visible').length;
      var summary_count = j('#summary-show-fine').siblings('.summary-row:visible').length;
      if (auto_fine_present == 'true')
          auto_fine_amt = <%= precision_label @fine_amount %>;

      if (fine > 0 || auto_fine_amt > 0) {
          input = '<td class="sl-col">' + (fines_count + 1) + '</td>' + '<td class="set_border_right particular-col">' +
                  '<span><%= "#{t('fine_on')} #{format_date(Date.today)}" %>' + '</span></td>' +
                  '<td class="set_border_right amount-col normal_font align_right" id="fine">' +
                  fine.toFixed(precision) + '</td><td class="cancel-disc cancel-color cancel-fine">x</td>';

          summary_fine = '<td class="sl-col col-1 normal_font">' + (summary_count + 1) + '</td>' +
                  '<td class="set_border_right particular-col normal_font"><%= "#{t('total')} #{t('fine')}" %>' +
                  '</td><td class="set_border_right amount-col normal_font align_right">' +
                  fine.toFixed(precision) + '</td><td class="cancel-disc cancel-color"></td>';

          fine_amount_updations(fine, 'add', precision);
          j('#fine-slab').hide();

          var fine_amount_hidden_field = j('<input>').attr({
              type: 'hidden',
              id: 'hidden_fine_amount',
              name: 'fees[fine_amount]',
              value: fine
          });

          var fine_included_hidden_field = j('<input>').attr({
              type: 'hidden',
              id: 'hidden_fine_included',
              name: 'fees[fine_included]',
              value: true
          });

          j(fine_amount_hidden_field).appendTo('form');
          j(fine_included_hidden_field).appendTo('form');
      }
      remove_popup_box();
  };

  function fine_amount_updations(fine, operator, precision) {
      fine = parseFloat(fine || 0);
      total_fees = parseFloat(j("#total-fees").text());
      amount_pay = parseFloat(j("#fees_amount").val());
      total_due_amount = parseFloat(j("#total-due-amount").text());
      total_fine = parseFloat(j("#total-fine").text());

      var fine_present = '<%= @transport_fee.is_paid and @fine_rule.present? %>';

      if (fine_present == 'false') {
          j('#head-show-fine').show();
          if (typeof summary_fine !== 'undefined'){
          j('#summary-show-fine').show().append(summary_fine);
          }
      }

      switch (operator) {
          case "add":
              j('#show-fine').show().append(input);
              break;
          case "subtract":
              j('#show-fine').hide();
              break;
      }

      j("#total-fine").text(add_or_subtract(operator, total_fine, fine).toFixed(precision));
      j("#total-fees").text(add_or_subtract(operator, total_fees, fine).toFixed(precision));
      j("#fees_amount").val(add_or_subtract(operator, amount_pay, fine).toFixed(precision));
      j("#amount_t").val(add_or_subtract(operator, amount_pay, fine).toFixed(precision));
      j("#total-due-amount").text(add_or_subtract(operator, total_due_amount, fine).
              toFixed(precision));  
                            
  }

  function add_or_subtract(operator, element1, element2) {
      switch (operator) {
          case "add":
              return element1 + element2;
          case "subtract":
              return element1 - element2;
      }
  }
  
  function update_summary_amount(method_name) {
    fine_amount_updations(fine, 'subtract', precision);

          j('#show-fine').text("");

          var fine_present = '<%= @transport_fee.is_paid and @fine_rule.present? %>';

          if (fine_present == 'false') {
              j('#head-show-fine').hide();
              j('#summary-show-fine').text("");
          }

          j('#fine-slab').show();
          j("#fees_amount").removeAttr('tooltip');
          j("#fees_amount").removeAttr('readonly');
          j('[id^="hidden_fine_amount"]').remove();
          j('[id^="hidden_fine_included"]').remove();
  }

  j(document).on('click', '.cancel-fine', function () {
      if (j('.cancel-fine').length == 1) {
          fine = parseFloat(j('#fine').text());
          var method_name = "manual_fine"
          update_summary_amount(method_name);
      }
      if (j('.wallet-amount-applied').length == 1){
        j('#wallet_amount_applied').val(false)
        j('.wallet-amount-field').val(parseFloat(total_wallet_amount).toFixed(precision))
        j('.wallet-amount-applied').val(parseFloat(0.00).toFixed(precision))
      }
  });
  
  
  j(document).off('click').on('click', '.auto-cancel-fine', function () {
    proceed = confirm('<%=t('delete_confirm_msg') %>');  
      if  (proceed && j('.auto-cancel-fine').length == 1) {
          fine = parseFloat(j('#auto_fine_amount').text());
          fine_amount_updations(fine, 'subtract', precision);
          j('<input>', {
              type: 'hidden',
              id: 'fine_waiver_div',
              name: 'fees[fine_waiver]',
              value: true
          }).appendTo('form');
          if (j("#total-due-amount").text() == 0){
            student = '<%= @student.present? ? @student.id : nil %>';
            batch_id = '<%= @batch.present? ? @batch.id : nil %>';
            date = '<%= @date.id %>';
            employee = '<%= @employee_id.present? ? @employee_id : nil %>'
            if(employee){
              var ajax_url = '/transport_fee/fees_submission_employee'
              var data_value = {
                  "date": date,
                  "employee": employee,
                  "is_fine_waiver": true
              };
            } else {
              var ajax_url = '/transport_fee/transport_fee_collection_details'
              var data_value = {
                  "date": date,
                  "student": student,
                  "batch_id": batch_id,
                  "is_fine_waiver": true
              };
            };
            j.ajax({
              method: "post",
              url: ajax_url,
              data: data_value
          });
          } else {
            j('#show-fine').text("");
            var fine_present = '<%= @transport_fee.is_paid and @fine_rule.present? %>';
            if (fine_present == 'false') {
                j('#head-show-fine').hide();
               j('#summary-show-fine').text("");
            }
            j('#auto_fine_cancel').hide();
          };
      }
  });

  j(document).ready(function () {
      var is_paid = '<%= @transport_fee.is_paid %>';
      if (is_paid == "false") {
          if (j('#total-due-amount').length != 0) {
              var payable_amount = parseFloat(j('#total-due-amount').html().trim());
              j('#fees_amount').val(payable_amount.toFixed(precision));
              j('.payment_t').val(payable_amount.toFixed(precision))
          }
      }
  });

</script>

<iframe class="" style="display:block;visibility:hidden;" id="receipt_printer_template_container"></iframe>
