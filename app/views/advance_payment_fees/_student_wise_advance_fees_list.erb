<div id="fees_list">
    <% @batches.each do |batch| %>
        <h3 class="fees_list_title">
            <span class="batch_full_name"><%=batch.complete_name %></span>
            <span class="payment_status"> <%= t('total') %> (<%= currency %>) : <%= @advance_fee_category_collections.collect(&:amount).map(&:to_f).sum %></span>
        </h3>
        <div class="fees_list_item">
            <table class="fees_table">
                <thead>
                    <th class="class44">
                        <%= t('advance_fee_category_name') %>
                    </th>
                    <th class="class13">
                        <%= t('advance_fees_collected') %> (<%= currency %>)
                    </th>
                    <th class="class13">
                        <%= t('last_paid_on') %>
                    </th>
                </thead>
                <% @advance_fee_category_collections.each do |collection| %>
                    <% if collection.batch_id == batch.id %>
                        <tr class="item status_cell">
                            <td><%= collection.category_name %></td>
                            <td><%= collection.amount %></td>
                            <td><%= format_date(collection.last_paid_date) %></td>
                        </tr>
                    <% end %>
                <% end %>
            </table>
        </div>
    <% end %>
</div>
  <script type="text/javascript">
    // j("#fees_list").accordion();
    (function ($) {
        $.fn.invisible = function () {
            return this.each(function () {
                $(this).css("visibility", "hidden");
            });
        };
        $.fn.visible = function () {
            return this.each(function () {
                $(this).css("visibility", "visible");
            });
        };
    }(jQuery));
    function set_paid_count_status() {
        j(".fees_list_title").each(function (index, value) {
            accodian_head = j(value);
            status_span = accodian_head.children()[2];
            status_cells = accodian_head.next().find(".status_cell");
            count = 0;
            status_cells.each(function (index, value) {
                status_cell = j(value)
                if (status_cell.data("status") === "unpaid") {
                    count += 1;
                }
            });
            if (count > 0) {
                message = "<span class='unpaid_count'>" + count.toString() + "</span>";
                message += " <%= t('unpaid_fees')%>";
                j(status_span).html(message);
                j(status_span).addClass("payment_status_active");
            }
            // console.log(accodian_head.next().find(".status_cell").length);
        });
    }
    function disable_empty_tab() {
        j(".fees_list_title").each(function (index, value) {
            accodian_head = j(value);
            status_span = accodian_head.children()[2];
            status_cells = accodian_head.next().find(".status_cell");
            if (status_cells.length <= 0) {
                message = "<%= t('no_fees_to_pay') %>";
                j(status_span).html(message);
                accodian_head.addClass("ui-state-disabled");
                // workaround to remove content of first ac
                accodian_head.removeClass("ui-accordion-header-active");
                accodian_head.next().hide();
                // hide others tab if contents are nil
                if (accodian_head.hasClass("other_fees")) {
                    accodian_head.hide();
                }
                // hide down button for inactive tabs
                icon_span = accodian_head.children()[0];
                j(icon_span).invisible();
            }
            // console.log(accodian_head.next().find(".status_cell").length);
        });
    }
    function set_red_color_for_unpaid_fees() {
        j(".status_cell").each(function (index, value) {
            if (j(value).data("status") == "unpaid") {
                j(value).css("color", "red");
            }
        });
    }
    j(function () {
        var icons = {
            header: "down-arrow-img",
            activeHeader: "up-arrow-img"
        };
        j("#fees_list").accordion({
            icons: icons,
            heightStyle: "content",
            collapsible: true,
            // workaround to allow multipple tabs open
            beforeActivate: function (event, ui) {
                // The accordion believes a panel is being opened
                if (ui.newHeader[0]) {
                    var currHeader = ui.newHeader;
                    var currContent = currHeader.next('.ui-accordion-content');
                    // The accordion believes a panel is being closed
                } else {
                    var currHeader = ui.oldHeader;
                    var currContent = currHeader.next('.ui-accordion-content');
                }
                // Since we've changed the default behavior, this detects the actual status
                var isPanelSelected = currHeader.attr('aria-selected') == 'true';

                // Toggle the panel's header
                currHeader.toggleClass('ui-corner-all',
                        isPanelSelected).toggleClass('ui-accordion-header-active ui-state-active ui-corner-top',
                        !isPanelSelected).attr('aria-selected', ((!isPanelSelected).toString()));

                // Toggle the panel's icon
                currHeader.children('.ui-icon').toggleClass('down-arrow-img',
                        isPanelSelected).toggleClass('up-arrow-img', !isPanelSelected);

                // Toggle the panel's content
                currContent.toggleClass('accordion-content-active', !isPanelSelected);
                if (isPanelSelected) {
                    currContent.slideUp();
                } else {
                    currContent.slideDown();
                }

                return false; // Cancels the default action
            }
        });
        set_paid_count_status();
        disable_empty_tab();
        set_red_color_for_unpaid_fees();
    });
  </script>
