<%-# Fedena
#Copyright 2010 Foradian Technologies Private Limited
#
#This product includes software developed at
#Project Fedena - http://www.projectfedena.org/
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing,
#software distributed under the License is distributed on an
#"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#KIND, either express or implied.  See the License for the
#specific language governing permissions and limitations
#under the License. -%>

<% if @student.present? %>
  <% form_remote_for :assessment_scores, :url=>{:action=>"observation_scores",:batch_id=>@batch.id,:observation_group_id=>@observation_group.id,:student_id=>@student.id}, :before=>"$('submit_button').disable()",:complete=>"setTimeout(function(){$('submit_button').enable();},5000)" do |form| %>
    <div class="observation_sheet_header">
        <div class="student_name"><%= @student.full_name%> <span class="admission_no">( <%=  @student.admission_no %> )&#x200E;</span><span class="max_grade"> &nbsp;(Maximum Marks : <%=@observation_group.max_grade%>)&#x200E;</span></div>
        <% if @observations.map(&:descriptive_indicators).compact.flatten.present? %>
          <%= submit_tag "", :value => "Save", :class => "submit_button", :id => 'submit_button' %>
        <% end %>

    </div>
    <div class="observation_sections scrollbar">
        <%= image_tag("loader.gif", :align => "absmiddle", :border => 0, :id => "loader_1", :style =>"display: none" ) %>
        <div class="observation_sections_main">
            <% @observations.each_with_index do |ob,ind| %>
              <%= render :partial => "observation_section", :locals =>{:ob=> ob, :ind=> ind} %>
            <% end %>
        </div>
    </div>
  <% end %>
<% end %>
<script>
  function draw_report() {
      Element.show('loader')
      new Ajax.Request('/assessment_scores/observation_scores',
              {asynchronous: true, evalScripts: true,
                  parameters: 'student=' + this.id + '&batch_id=<%= @batch.id %>' + '&observation_group_id=<%= @observation_group.id %>', onSuccess: function (request) {
                      Element.hide('loader')
                  }
              })
  }

  /*
   function validate_mark(text_box, ob_id)
   {
   if (isNaN(text_box.value) == false)
   {
   if (text_box.value < 0)
   {
   alert("Mark should be positive");
   text_box.value = 0;
   return false;
   }
   else if (text_box.value > (<%= "#{@observation_group.max_grade}"%>))
   {
   alert("Mark should not exceed maximum mark");
   text_box.value = 0;
   return false;
   }
   }
   
   else
   {
   alert("Enter numeric value");
   text_box.value = 0;
   refresh_grade(ob_id);
   return false;
   }
   }*/
  var error_entries = new Array();
  validate_mark = function (text_box) {
      var max_grade = <%= "#{@observation_group.max_grade}"%>
      if (parseFloat(text_box.value) > max_grade) {
          j(text_box).attr('title', 'Mark should not exceed maximum mark')
          j(text_box).tooltip({
              tooltipClass: "tooltip_error",
              effect: "fade",
              opacity: 0.7,
          });
          curr_id = j(text_box).attr('id');
          if (j.inArray(curr_id, error_entries) === -1)
          {
              error_entries.push(curr_id);
              j(text_box).tooltip('open');
              j('.submit_button').attr('disabled', 'disabled');
              //j('#err').text('Please fix all issues on the form to proceed.')
              j(text_box).closest('tr').css('background-color', '#fff2f3');
              j(text_box).css('border', '2px solid #9e0f15');
              parent_label = j(text_box).closest('tr').find('td.observation_label')
              j(parent_label).css('background-color', '#fff2f3').css('color', '#9e0f15');
          }
          if (navigator.userAgent.indexOf("Firefox") !== -1)
          {
              j("input.precision_text").keyup(function (e) {
                  var code = e.which;
                  if (code === 9) {
                      return;
                  }
              });
              setTimeout("j('#" + curr_id + "').focus();", 1);
          } else {
              j(text_box).focus();
          }
          return false;
      } else {
          curr_id = j(text_box).attr('id');
          if (j.inArray(curr_id, error_entries) !== -1)
          {
              error_entries.pop(curr_id)
              j(text_box).tooltip()
              j(text_box).tooltip('close').removeAttr('title');
              j(text_box).removeAttr('style');
              j(text_box).closest('tr').removeAttr('style');
              parent_label = j(text_box).closest('tr').find('td.observation_label')
              j(parent_label).removeAttr('style')
          }
          if (error_entries.length === 0)
          {
              j('#err').text('');
              j('.submit_button').removeAttr('disabled');
          }

      }


  }














  j("input[id^='grade']").on('change', function () {
      var sum = 0;
      var id = j(this).parent().attr("class").match(/\d+/);
      id = parseInt(id);
      j('.field_' + id).each(function () {
          val = j(this).find('input').val();
          val = parseFloat(val) || 0;
          sum = sum + val;
      })
      indicators = 0;
      j('.field_'+id).each(function(){
        if(j(this).children('input').val() != ""){
          indicators++
        }
      })
      average = sum / indicators;
      find_grade(average, id);
  });
  function find_grade(avg, id) {
      j.ajax({
          type: 'POST',
          url: "/assessment_scores/get_grade",
          data: {
              observation_group_id: <%=@observation_group.id%>,
              average: avg
          },
          success: function (data) {
              j('span#grade_field_' + id).html(data);
          }
      });
  }

  j('.observation_sections').scroll(function () { // hides all selected drop downs on scroll
      j('.remarks_list').css('display', 'none');
      j('.remark_drop').html('▼');
      j('.remark_drop').removeClass('opened_box');
  });
  j(document).click(function (event) {
      var myarr = ["[object HTMLHeadingElement]", "[object HTMLBodyElement]", "[object HTMLDivElement]"]
      var contains = (myarr.indexOf(event.target.toString()) > -1);
      if (contains) {
        j('.remarks_list').css('display', 'none');
        j('.remark_drop').html('▼');
        j('.remark_drop').removeClass('opened_box');
      }

  });

</script>
