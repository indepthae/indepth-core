<% page =@controller.action_name=="student_fees_headwise_report" ? :report : :profile %>
<div id="fees_list">
    <% @batches.each do |batch| %>
      <h3 class="fees_list_title">
          <span class="batch_full_name"><%=batch.complete_name %></span>
          <span class="payment_status"> <%= t('all_fees_paid') %> </span>
      </h3>
      <div class="fees_list_item">
          <table class="fees_table">
              <thead>
              <th class="class44">
                  <%= t('fees_name') %>
              </th>
              <th class="class13">
                  <%= t('status') %>
              </th>
              <th class="class13">
                  <%= t('amount') %>
                  <%= "(#{currency})" %>
              </th>
              <th class="class20">
                  <%= t('date_text') %>
              </th>
              </thead>
              <% unless @student_batch_fees[batch.id].empty? %>              
                <tr class="table_subtitle">
                    <td colspan="4" ><%= t('general_fees') %></td>
                </tr>
              <% end %>
              <% @student_batch_fees[batch.id].each do |fee| %>
                <tr class="item">
                    <td>
                        <% if permitted_to? :fee_details ,:student %>
                          <%= link_to "#{fee.name}", {:controller=>:student,:action=>:fee_details, 
                            :id=>@student.former_id,:student_type => 'former', :id2=>fee.id}, :class=>"themed_hover_text" %>
                        <% else %>
                          <%= fee.name %>
                        <% end %>
                    </td>
                    <%if fee.is_fine_waiver == "1"%>
                    <%fine_to_pay = 0.0%>
                    <% elsif Configuration.is_fine_settings_enabled? && fee.balance.to_f<=0 && !fee.is_paid? && fee.balance_fine.present? %>
                      <%fine_to_pay = fee.balance_fine.to_f%>
                    <%else%>
                      <% fine_amount = fee.is_amount == "0" ? (fee.actual_amount.to_f*fee.fine_amount.to_f)/100 : fee.fine_amount if fee.is_amount.present? %>
                      <% fine_to_pay = fine_amount.present? ? (fine_amount.to_f - fee.automatic_fine_paid.to_f) : 0 %>
                    <%end%> 
                    <% paid = (fee.is_paid? || ((precision_label(fee.balance.to_f + 
                              fine_to_pay.to_f))==precision_label(0))) %>
                    <% if paid %>
                      <td class="status_cell" data-status="paid">
                          <%=  t('paid') %>
                      </td>
                      <td>
                          <%= precision_label(fee.paid_amount) %>
                      </td>
                      <td>
                          <%= t('paid_on') %>
                          <%= format_date(fee.last_transaction_date) %>
                      </td>
                    <% else %>
                      <% patially_paid_amount=fee.try(:paid_amount) %>
                      <% amount_to_pay=fee.balance.to_f+fine_to_pay.to_f %>
                      <% total_amount=patially_paid_amount.to_f+amount_to_pay %>
                      <td class="status_cell" data-status="unpaid" 
                          data-amount-to-pay="<%= amount_to_pay %>" 
                          data-partialy-paid-amount="<%= patially_paid_amount %>" >
                              <%=  t('unpaid') %>
                      </td>
                      <td>
                          <%= precision_label(amount_to_pay)+ "  /  " + precision_label(total_amount) %>
                      </td>
                      <td>
                          <%= t('due_on') %>
                          <%= format_date(fee.due_date) %>
                      </td>
                    <% end %>
                </tr>
              <% end %>
              <% FedenaPlugin.deliver_registered_hook(:student_profile_fees).each do |mod| %>
                <%= render :partial=>mod.camelize.constantize.send("student_profile_fees_by_batch_hook"),
                  :locals=>{:student=>@student,:batch=>batch,:page=>page} %>
              <% end %>
          </table>
      </div>
    <% end %>
    <!-- batch less  -->
    <h3 class="fees_list_title other_fees"> 
        <span class="batch_full_name"> <%= t('others') %></span>
        <span class="payment_status"><%= t('all_fees_paid') %></span>
    </h3>
    <div class="fees_list_item">
        <table class="fees_table">
            <thead>
            <th class="class44">
                <%= t('fees_name') %>
            </th>
            <th class="class13">
                <%= t('status') %>
            </th>
            <th class="class13">
                <%= t('amount') %>
                <%= "(#{currency})" %>
            </th>
            <th class="class20">
                <%= t('date_text') %>
            </th>
            </thead>
            <% FedenaPlugin.deliver_registered_hook(:student_profile_fees).each do |mod| %>
              <%= render :partial=>mod.camelize.constantize.send("student_profile_fees_by_batch_hook"),
                :locals=>{:student=>@student,:batch=>nil,:page=>page} %>
            <% end %>
        </table>
    </div>
</div>
<script type="text/javascript">
  // j("#fees_list").accordion();
  (function ($) {
      $.fn.invisible = function () {
          return this.each(function () {
              $(this).css("visibility", "hidden");
          });
      };
      $.fn.visible = function () {
          return this.each(function () {
              $(this).css("visibility", "visible");
          });
      };
  }(jQuery));
  function set_paid_count_status() {
      j(".fees_list_title").each(function (index, value) {
          accodian_head = j(value);
          status_span = accodian_head.children()[2];
          status_cells = accodian_head.next().find(".status_cell");
          count = 0;
          status_cells.each(function (index, value) {
              status_cell = j(value)
              if (status_cell.data("status") === "unpaid") {
                  count += 1;
              }
          });
          if (count > 0) {
              message = "<span class='unpaid_count'>" + count.toString() + "</span>";
              message += " <%= t('unpaid_fees')%>";
              j(status_span).html(message);
              j(status_span).addClass("payment_status_active");
          }
          // console.log(accodian_head.next().find(".status_cell").length);
      });
  }
  function disable_empty_tab() {
      j(".fees_list_title").each(function (index, value) {
          accodian_head = j(value);
          status_span = accodian_head.children()[2];
          status_cells = accodian_head.next().find(".status_cell");
          if (status_cells.length <= 0) {
              message = "<%= t('no_fees_to_pay') %>";
              j(status_span).html(message);
              accodian_head.addClass("ui-state-disabled");
              // workaround to remove content of first ac
              accodian_head.removeClass("ui-accordion-header-active");
              accodian_head.next().hide();
              // hide others tab if contents are nil
              if (accodian_head.hasClass("other_fees")) {
                  accodian_head.hide();
              }
              // hide down button for inactive tabs
              icon_span = accodian_head.children()[0];
              j(icon_span).invisible();
          }
          // console.log(accodian_head.next().find(".status_cell").length);
      });
  }
  function set_red_color_for_unpaid_fees() {
      j(".status_cell").each(function (index, value) {
          if (j(value).data("status") == "unpaid") {
              j(value).css("color", "red");
          }
      });
  }
  j(function () {
      var icons = {
          header: "down-arrow-img",
          activeHeader: "up-arrow-img"
      };
      j("#fees_list").accordion({
          icons: icons,
          heightStyle: "content",
          collapsible: true,
          // workaround to allow multipple tabs open
          beforeActivate: function (event, ui) {
              // The accordion believes a panel is being opened
              if (ui.newHeader[0]) {
                  var currHeader = ui.newHeader;
                  var currContent = currHeader.next('.ui-accordion-content');
                  // The accordion believes a panel is being closed
              } else {
                  var currHeader = ui.oldHeader;
                  var currContent = currHeader.next('.ui-accordion-content');
              }
              // Since we've changed the default behavior, this detects the actual status
              var isPanelSelected = currHeader.attr('aria-selected') == 'true';

              // Toggle the panel's header
              currHeader.toggleClass('ui-corner-all',
                      isPanelSelected).toggleClass('ui-accordion-header-active ui-state-active ui-corner-top',
                      !isPanelSelected).attr('aria-selected', ((!isPanelSelected).toString()));

              // Toggle the panel's icon
              currHeader.children('.ui-icon').toggleClass('down-arrow-img',
                      isPanelSelected).toggleClass('up-arrow-img', !isPanelSelected);

              // Toggle the panel's content
              currContent.toggleClass('accordion-content-active', !isPanelSelected);
              if (isPanelSelected) {
                  currContent.slideUp();
              } else {
                  currContent.slideDown();
              }

              return false; // Cancels the default action
          }
      });
      set_paid_count_status();
      disable_empty_tab();
      set_red_color_for_unpaid_fees();
  });
</script>
